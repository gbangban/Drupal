<?php
// $Id: short_answer.module,v 1.2.2.17 2010/01/26 14:21:08 falcon Exp $

/**
 * The main file for short_answer.
 *
 * Short answer is structurally similar to long answer. However, the module
 * mechanism makes it very difficult for these two modules (either one of
 * which may be disabled) to effectively share code.
 * @file
 */

/**
 * Implementation of hook_help().
 */
function short_answer_help($path, $args) {
  if ($path == 'admin/help#short_answer') {
    return t('This module provides a short answer question type for Quiz.');
  }
}

function short_answer_perm() {
  return array('use regex for short answer');
}

/**
 * Implementation of hook_menu().
 */
function short_answer_menu() {
  $items['admin/quiz/reports/score-short-answer'] = array(
    'title' => t('Score short-answer questions'),
    'description' => t('Score the answers from quizzes that use short answer questions.'),
    'page callback' => 'short_answer_view_unscored',
    //'page arguments' => array('short_answer_admin_settings_form'),
    'access arguments' => array('score any quiz', 'score own quiz'),
    'access callback' => 'quiz_access_multi_or',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'short_answer.admin.inc',
  );
  // Pass vid and rid to this path.
  $items['admin/quiz/reports/score-short-answer/%/%'] = array(
    'title' => t('Score short-answer response'),
    'description' => t('Score a response to a short-answer question.'),
    'page callback' => 'short_answer_edit_score',
    'page arguments' => array(3, 4),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array(3, 4),
    'access callback' => 'quiz_question_access_to_score',
    'file' => 'short_answer.admin.inc'
  );

  return $items;
}

/**
 * Implementation of hook_quiz_question_info().
 */
function short_answer_quiz_question_info() {
  return array(
    'short_answer' => array(
      'name' => t('Short answer question'),
      'description' => t('Quiz questions that allow a user to enter a line of text.'),
      'question provider' => 'ShortAnswerQuestion',
      'response provider' => 'ShortAnswerResponse',
      'module' => 'quiz_question', // All wrapper functions are in that module.
    ),
  );
}


function short_answer_config() {
  return FALSE;
}

/**
 * Implementation of hook_autoload_info().
 */
function short_answer_autoload_info() {
  return array(
    'ShortAnswerQuestion' => array('file' => 'short_answer.classes.inc'),
    'ShortAnswerResponse' => array('file' => 'short_answer.classes.inc'),
  );
}

/**
 * Implementation of hook_theme().
 */
function short_answer_theme() {
  return array(
    'short_answer_feedback' => array(
      'arguments' => array(
        'quiz' => NULL,
        'report' => NULL
      ),
      'path' => drupal_get_path('module', 'short_answer') .'/theme',
      'file' => 'short_answer.theme.inc',
    ),
    'short_answer_view_unscored' => array(
      'arguments' => array('unscored' => array()),
      'file' => 'short_answer.admin.inc',
    ),
  );
}

/**
 * Set a score for a short answer question.
 *
 * This stores a score for a short answer question and marks that question as having been evaluated.
 * The function updates all of the necessary data sources so that the individual answer results should be
 * reflected in the total scoring table.
 *
 * @param $quiz
 *  Quiz node.
 * @param $nid
 *  Node ID of question.
 * @param $vid
 *  Version ID of question.
 * @param $rid
 *  Result ID for the quiz results.
 * @param $score
 *  The numeric score to assign the result.
 *
 * @return int
 *  Number of scores adjusted. If a change was made, this should be 1.
 */
function short_answer_score_an_answer($quiz, $nid, $vid, $rid, $score, $update_total = TRUE) {
  // See long_answer.module for details on how this works.

  db_query("UPDATE {quiz_short_answer_user_answers} 
            SET score = %d * (
              SELECT max_score
              FROM {quiz_question_properties}
              WHERE vid = %d
            ) / (
              SELECT max_score
              FROM {quiz_node_relationship}
              WHERE parent_vid = %d
              AND child_vid = %d
            ), is_evaluated = 1 
            WHERE question_nid = %d 
            AND question_vid = %d 
            AND result_id = %d", 
           $score, $vid, $quiz->vid, $vid, $nid, $vid, $rid);
  $changed = db_affected_rows();

  if ($changed > 0) {
    // What do we do about the quiz_node_results_answers table? It assumes strict
    // bivalence (is_correct). I guess we consider any essay with over 50% to be correct?
    $max = db_result(db_query('SELECT max_score FROM {quiz_question_properties} WHERE vid = %d', $vid));
    if ($max <= 0) {
      $is_correct = 0;
      $points_awarded = 0;
    }
    else {
      $is_correct = ($score / $max > 0.5) ? 1 : 0;
      $points_awarded = $score;
    }

    $sql = 'UPDATE {quiz_node_results_answers}
      SET points_awarded = %d, is_correct = %d
      WHERE question_vid = %d AND result_id = %d';
    db_query($sql, $points_awarded, $is_correct, $vid, $rid);

    // Third, we update the main quiz results table
    if ($update_total)
      quiz_update_total_score($quiz, $rid);
  }

  return $changed;
}

function short_answer_report_validate($values, $form_key) {
  // Check to make sure that entered score is not higher than max allowed score.
  if (!is_numeric($values['score'])) {
    form_set_error($form_key .'][score', t('The score needs to be numeric'));
  }
  $max = (int)$values['max_score'];
  $given = (int)$values['score'];

  if ($given > $max || $given < 0) {
    $args = array('@score' => $given, '@max' => $max);
    form_set_error($form_key .'][score', t('The given score (@score) is higher than the maximum allowed score (@max)', $args));
  }
}

function short_answer_report_submit($values) {
  short_answer_score_an_answer($values['quiz'], $values['nid'], $values['vid'], $values['rid'], (int)$values['score'], FALSE);
}

/**
 * Set the answer for a question.
 *
 * This stores a score for a short answer question and marks that question as having been evaluated.
 * @param $nid
 *  Node ID of question.
 * @param $vid
 *  Version ID of question.
 * @param $rid
 *  Result ID for the quiz results.
 *
 * @return Assoc array
 *  An array if successful, or FALSE if no result could be found. The array contains the following properties:
 *  <code>
 *  answer_id; // The answer ID
 *  answer; // The full text of the answer
 *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
 *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
 *  question_vid
 *  question_nid
 *  result_id
 *  </code>
 */
function short_answer_get_answer($question_nid, $question_vid, $result_id) {
  $sql = "SELECT answer_id, answer, is_evaluated, score, question_vid, question_nid, result_id
    FROM {quiz_short_answer_user_answers}
    WHERE question_nid = %d AND question_vid = %d AND result_id = %d";
  $results = db_query($sql, $question_nid, $question_vid, $result_id);

  if (!$results) {
    return FALSE;
  }

  return db_fetch_array($results);
}

/*
 * @function
 * To generate a list of short answer questions node
 * @return
 * array containing nid as key and title as value
 */
function short_answer_questions_list() {
  $questions = array();
  $type = 'short_answer';
  $sql = "SELECT nid, title FROM {node} WHERE type = '%s'";
  $results = db_query($sql, $type);
  while ($result = db_fetch_object($results)) {
    $questions[$result->nid] = check_plain($result->title);
  }
  return $questions;
}
