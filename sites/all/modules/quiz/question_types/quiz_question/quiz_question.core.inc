<?php

// $Id: quiz_question.core.inc,v 1.2.2.74 2010/01/28 15:06:22 falcon Exp $

/**
 * Classes used in the Quiz Question module.
 *
 * The core of the Quiz Question module is a set of interfaces and abstract
 * classes that can be used to quickly and efficiently create new question
 * types.
 *
 * Why OO?
 * Drupal has a long history of avoiding many of the traditional OO structures
 * and metaphors. However, with PHP 5, there are many good reasons to use OO
 * principles more broadly.
 *
 * The case for Quiz question types is that question types all share common
 * structure and logic. Using the standard hook-only Drupal metaphor, we are
 * forced to copy and paste large amounts of repetitive code from question
 * type to question type. By using OO principles and construction, we can
 * easily encapsulate much of that logic, while still making it easy to
 * extend the existing content.
 *
 * Where do I start?
 * To create a new question type, check out the True/False type that is included
 * in this module.
 *
 * @file
 */


/**
 * A base implementation of a quiz_question, adding a layer of abstraction between the
 * node API, quiz API and the question types.
 *
 * It is required that Question types extend this abstract class.
 *
 * This class has default behaviour that all question types must have. It also handles the node API, but
 * gives the question types oppurtunity to save, delete and provide data specific to the question types.
 * This is done by declaring helper functions as abstract functions instead of relying on the question
 * types to call their parent methods for all node API methods.
 *
 * This abstract class also declares several abstract functions forcing question-types to implement required
 * methods.
 */
abstract class QuizQuestion {
  /*
   * QUESTION IMPLEMENTATION FUNCTIONS
   *
   * This part acts as a contract(/interface) between the question-types and the rest of the system.
   *
   * Question types are made by extending these generic methods and abstract methods.
   */

  /**
   * The current node for this question.
   */
  public $node = NULL;

  // Extra node properties
  public $nodeProperties = NULL;
  /**
   * Retrieve information relevant for viewing the node.
   *
   * (This data is generally added to the node's extra field.)
   *
   * @return
   *  Content array
   */
  public function getNodeView() {
    $type = node_get_types('type', $this->node);
    $content['question_type'] = array(
      '#type'  => 'markup',
      '#value' => '<div class="question_type_name">' . $type->name . '</div>',
      '#weight' => -2,
    );
    $content['question'] = array(
      '#type'  => 'markup',
      '#value' => check_markup($this->node->body, $this->node->format, FALSE),
      '#weight' => -1,
    );
    return $content;
  }

  /**
   * Getter function returning properties to be loaded when the node is loaded.
   *
   * @see load hook in quiz_question.module (quiz_question_load)
   *
   * @return array
   */
  public function getNodeProperties() {
    if (isset($this->nodeProperties)) return $this->nodeProperties;
    $sql = 'SELECT max_score
            FROM {quiz_question_properties}
            WHERE nid = %d AND vid = %d';
    $props['max_score'] = db_result(db_query($sql, $this->node->nid, $this->node->vid));
    $this->nodeProperties = $props;
    return $props;
  }

  /**
   * Responsible for handling insert/update of question-specific data.
   * This is typically called from within the Node API, so there is no need
   * to save the node. This function is only responsible for saving data
   * specific to the implement ation.
   *
   * The $is_new flag is set to TRUE whenever the node is being initially
   * created.
   *
   * A save function is required to handle the following three situations:
   * - A new node is created ($is_new is TRUE)
   * - A new node *revision* is created ($is_new is NOT set, because the
   *   node itself is not new).
   * - An existing node revision is modified.
   *
   * @see hook_update and hook_insert in quiz_question.module
   *
   * @param $is_new
   *  TRUE when the node is initially created.
   */
  public function save($is_new = FALSE) {
  	$this->saveNodeProperties($is_new);
    $is_new_node = $is_new || $this->node->revision == 1;
    if ($is_new_node) {
      $sql = 'INSERT INTO {quiz_question_properties}
              (nid, vid, max_score)
              VALUES(%d, %d, %d)';
      db_query($sql, $this->node->nid, $this->node->vid, $this->getMaximumScore());
    } else {
      $sql = 'UPDATE {quiz_question_properties}
              SET max_score = %d
              WHERE nid = %d AND vid = %d';
      db_query($sql, $this->getMaximumScore(), $this->node->nid, $this->node->vid);
    }
    $questions_kept = $this->saveRelationships();
    if ($questions_kept && $this->node->revision) {
      if (user_access('manual quiz revisioning')) {
        unset($_REQUEST['destination']);
        unset($_REQUEST['edit']['destination']);
        drupal_goto('quiz_question/'. $this->node->nid .'/'. $this->node->vid .'/revision_actions');
      }
      else {
        $form_state = array();
        $form_state['values']['op'] = t('Submit');
        require_once(drupal_get_path('module', 'quiz_question') .'/quiz_question.pages.inc');
        drupal_execute('quiz_question_revision_actions', $form_state, $this->node->nid, $this->node->vid);
      }
    }
  }

  /**
   * Delete question data from the database.
   *
   * Called by quiz_question_delete (hook_delete).
   * Child classes must call super
   *
   * @param $only_this_version
   *  If the $only_this_version flag is TRUE, then only the particular
   *  nid/vid combo should be deleted. Otherwise, all questions with the
   *  current nid can be deleted.
   */
  public function delete($only_this_version = FALSE) {
    $sql = 'DELETE FROM {quiz_question_properties}
            WHERE nid = %d';
    if ($only_this_version) $sql .= ' AND vid = %d';
    db_query($sql, $this->node->nid, $this->node->vid);
  }

  /**
   * Provides validation for question before it is created.
   *
   * When a new question is created and initially submited, this is
   * called to validate that the settings are acceptible.
   *
   * @param $form
   *  The processed form.
   */
  abstract public function validateNode(array &$form);

  /**
   * Get the form through which the user will answer the question.
   *
   * @param $context
   *  The form context.
   * @return
   *  Must return a FAPI array.
   */
  abstract public function getAnsweringForm(array $form_state = NULL, $rid);

  /**
   * Get the form used to create a new question.
   *
   * @param
   *  FAPI form state
   * @return
   *  Must return a FAPI array.
   */
  abstract public function getCreationForm(array $form_state = NULL);

  /**
   * Get the maximum possible score for this question.
   */
  abstract public function getMaximumScore();

  abstract public function saveNodeProperties($is_new = FALSE);


  /*
   * DEFAULT BEHAVIOR
   * Behavior default for all question types should be written below
   */

  /**
   * QuizQuestion constructor stores the node object.
   *
   * @param $node
   *   The node object
   */
  public function __construct(stdClass &$node) {
    $this->node = $node;
  }
  
  public function getBodyFieldTitle() {
    return t('Question');
  }

  public function getNodeForm(array $form_state = NULL) {
    global $user;
    $form = array();
    $form['#quiz_check_revision_access'] = TRUE;
    $form['body_field']['body'] = array(
      '#type' => 'textarea',
      '#title' => $this->getBodyFieldTitle(),
      '#description' => t('Enter the full text of the question that will be shown to the user. Include any special instructions on how to answer.'),
      '#default_value' => $this->node->body,
      '#required' => TRUE,
      '#weight' => -15,
    );

    // process up the filter format
    $form['body_field']['format'] = filter_form($this->node->format);
    $form['body_field']['format']['#weight'] = -14;
    $form['body_field']['#weight'] = -15;
    // First we do the basic title and text fields.
    // XXX: Should there be a way for question types to modify these (other than form alter hooks)?

    // Allow user to set title?
    if (user_access('allow user titles')) {
      $form['helper']['#theme'] = 'quiz_question_creation_form';
      $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => $this->node->title,
        '#required' => FALSE,
        '#description' => t('Add a title that will help distinguish this question from other questions. This will not be seen during the quiz.'),
      );
    }
    else {
      $form['title'] = array(
        '#type' => 'value',
        '#value' => $this->node->title,
      );
    }

    // Collection ID used here to tie creation of a question to a specific quiz
    $quiz_id = arg(3);
    if (is_numeric($quiz_id)) {
      $vid = (is_numeric(arg(4) && arg(4) > 0)) ? arg(4) : NULL;
      $quiz = node_load((int)$quiz_id, $vid);
      $form['quiz_nid'] = array(
        '#type' => 'value',
        '#value' => $quiz->nid,
      );
      $form['quiz_vid'] = array(
        '#type' => 'value',
        '#value' => $quiz->vid,
      );

      // If coming from quiz view, go back there on submit.

      // TODO ask the node itself where to go after authoring a question
      if ($quiz->type == 'quiz') {
        $form['#redirect'] = 'node/'. $quiz->nid .'/questions';
      }
    }

    //Add question specific content
    $form = array_merge($form, $this->getCreationForm($form_state));
    $edit_access = user_access('edit any quiz') || user_access('edit own quiz');
    if ($edit_access) {
      $own_filter = user_access('edit any quiz') ? '' : 'AND n.uid = '. intval($user->uid);
      // Fieldset allowing question makers to add questions to multiple quizzes when creating quizzes
      $already = array();
      $already_nids = array();
      if (is_numeric($this->node->nid)) {
        // Finding quizzes this question already belongs to.
        $sql = "SELECT n.nid, r.parent_vid AS vid, n.title
                FROM {quiz_node_relationship} r
                JOIN {node} n
                ON n.nid = r.parent_nid
                WHERE r.child_nid = %d $own_filter
                ORDER BY r.parent_vid DESC";
        $res = db_query($sql, $this->node->nid, $this->node->vid);
        while ($res_o = db_fetch_object($res)) {
          if (in_array($res_o->nid, $already_nids)) continue;
          $already_nids[] = $res_o->nid;
          $already[$res_o->nid .'-'. $res_o->vid] = $res_o->title;
        }
      }
      $found = implode(', ', $already_nids);
      $latest = array();
      $latest_nids = array();
      // Finding the last quizzes the current user has been using
      $sql = "SELECT quiz_nid, n.vid, title
              FROM {quiz_question_latest_quizzes} lq
              JOIN {node} n
              ON n.nid = lq.quiz_nid
              WHERE lq.uid = %d $own_filter";
      if (drupal_strlen($found) > 0) $sql .= " AND quiz_nid NOT IN ($found)";
      $sql .= " ORDER BY lq.id DESC";
      $res = db_query($sql, $user->uid);
      while ($res_o = db_fetch_object($res)) {
        $latest[$res_o->quiz_nid .'-'. $res_o->vid] = $res_o->title;
        $latest_nids[] = $res_o->quiz_nid;
      }
      $found = implode(', ', array_merge($already_nids, $latest_nids));
      if (count($latest) < QUIZ_QUESTION_N_O_LATEST) {
        // Suplementing with other available quizzes...
        $sql = "SELECT n.nid, n.vid, title
                FROM {node} n
                WHERE type = 'quiz' $own_filter";
        if (drupal_strlen($found) > 0) {
          $sql .= " AND n.nid NOT IN ($found)";
        }
        $sql .= " ORDER BY changed LIMIT %d";
        $res = db_query(db_rewrite_sql($sql), QUIZ_QUESTION_N_O_LATEST - count($latest));
        while ($res_o = db_fetch_object($res)) {
          $latest[$res_o->nid .'-'. $res_o->vid] = $res_o->title;
        }
      }
      // If we came from the manage questions tab...
      $latest_default = array();
      if (isset($quiz)) {
        foreach ($latest as $key => $value) {
          $latest_nid = preg_match('/^[0-9]+/', $key);
          if ($latest_nid == $quiz->nid) {
            unset($latest[$key]);
            break;
          }
        }
        $sql = 'SELECT title
                FROM {node_revisions}
                WHERE vid = %d';
        $res = db_query($sql, $quiz->vid);
        $latest[$quiz->nid .'-'. $quiz->vid] = db_result($res);
        $latest_default[] = $quiz->nid .'-'. $quiz->vid;
      }
    }
    if ($edit_access || user_access('create quiz')) {
      $form['add_directly'] = array(
        '#type' => 'fieldset',
        '#title' => t('Add to quiz'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => -3,
        '#tree' => TRUE,
      );
    }
    if ($edit_access) {
      if (count($already) > 0) {
        $desc = 'If you uncheck any of the checkboxes this question will be removed from the corresponding quiz. ';
        $desc .= 'If the quiz has been answered a new revision of the quiz will be created automatically.';
        $form['add_directly']['already'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Quizzes this question already is a member of'),
          '#description' => t($desc),
          '#options' => $already,
          '#default_value' => array_keys($already),
        );
      }
      if (count($latest) > 0) {
        $desc = t('If you check any of the checkboxes this question will be added to the corresponding quiz. If the quiz has been answered a new revision will be created automatically.');
        $form['add_directly']['latest'] = array(
          '#type' => 'checkboxes',
          '#title' => t('The @latest latest quizzes this question isn\'t a member of', array('@latest' => count($latest))),
          '#description' => $desc,
          '#options' => $latest,
          '#default_value' => $latest_default,
        );
      }
    }
    if (user_access('create quiz')) {
      $form['add_directly']['new'] = array(
        '#type' => 'textfield',
        '#title' => t('Title for new quiz'),
        '#description' => t('Write in the name of the new quiz you want to create and add this question to.'),
      );
    }
    if ($this->hasBeenAnswered()) {
      $log = t('The current revision has been answered. We create a new revision so that the reports from the existing answers stays correct.');
      $this->node->revision = 1;
      $this->node->log = $log;
    }
    return $form;
  }

  /**
   * Handle the add to quiz part of the quiz_question_form
   *
   * @param $node
   *   node object made out of form values.
   */
  function saveRelationships() {
    $questions_kept = FALSE;
    unset($_SESSION['quiz_question_kept']);
    /*
     * If the question already is part of quizzes we might have to remove some
     * relationships
     */
    if (is_array($this->node->add_directly['already'])) {
      foreach ($this->node->add_directly['already'] as $key => $checked) {
        if ($checked == 0) {
          $nid_vid = explode('-', $key);
          $dummy_node = new stdClass();
          $dummy_node->nid = $nid_vid[0];
          $dummy_node->vid = $nid_vid[1];
          if (quiz_has_been_answered($dummy_node)) {
            $temp_quiz_node = node_load($dummy_node->nid, $dummy_node->vid);
            $temp_quiz_node->revision = 1;
            $temp_quiz_node->auto_created = true;
            node_save($temp_quiz_node);
            $nid_vid[1] = $temp_quiz_node->vid;
            $msg = 'New revision has been created for the quiz %n';
            drupal_set_message(t($msg, array('%n' => $temp_quiz_node->title)));
          }
          $sql = 'DELETE FROM {quiz_node_relationship}
                  WHERE parent_nid = %d AND parent_vid = %d AND child_nid = %d AND child_vid = %d';
          db_query($sql, $nid_vid[0], $nid_vid[1], $this->node->nid, $this->node->vid);
        }
        else {
          $questions_kept = TRUE;
          $_SESSION['quiz_question_kept'][] = $key;
        }
      }
    }

    /*
     * The quiz question might have been added to new quizzes
     */
    if (is_array($this->node->add_directly['latest'])) {
      $to_insert = 'VALUES';
      $insert_values = array();
      foreach ($this->node->add_directly['latest'] as $nid => $checked) {
        if ($checked != 0) {
          $dummy_node = new stdClass();
          $dummy_node->nid = $nid_vid[0];
          $dummy_node->vid = $nid_vid[1];
          if (quiz_has_been_answered($dummy_node)) {
            $temp_quiz_node = node_load($dummy_node->nid, $dummy_node->vid);
            $temp_quiz_node->revision = 1;
            $temp_quiz_node->auto_created = true;
            node_save($temp_quiz_node);
            $nid_vid[1] = $temp_quiz_node->vid;
            $msg = 'New revision has been created for the quiz %n';
            drupal_set_message(t($msg, array('%n' => $temp_quiz_node->title)));
          }
          if (count($insert_values) > 0) $to_insert .= ',';
          $to_insert .= ' (%d, %d, %d, %d, %d)';
          $nid_vid = explode('-', $checked);
          $insert_values[] = $nid_vid[0];
          $insert_values[] = $nid_vid[1];
          $delete_values[] = $nid_vid[1];
          $delete_values[] = $this->node->nid;
          $delete_sqls[] = '(parent_vid = %d AND child_nid = %d)';
          $insert_values[] = $this->node->nid;
          $insert_values[] = $this->node->vid;
          $insert_values[] = $this->getMaximumScore();
        }
      }
      if (count($insert_values) > 0) {
        $sql = 'DELETE FROM {quiz_node_relationship}
                WHERE '. implode(' OR ', $delete_sqls);
        db_query($sql, $delete_values);
        $sql = 'INSERT INTO {quiz_node_relationship}
                (parent_nid, parent_vid, child_nid, child_vid, max_score)
                '. $to_insert;
        db_query($sql, $insert_values);
      }
    }
    if (drupal_strlen($this->node->add_directly['new']) > 0) {
      $new_node = quiz_make_new($this->node->add_directly['new']);
      $sql = 'INSERT INTO {quiz_node_relationship}
              (parent_nid, parent_vid, child_nid, child_vid, max_score)
              VALUES (%d, %d, %d, %d, %d)';
      db_query($sql, $new_node->nid, $new_node->vid, $this->node->nid, $this->node->vid, $this->getMaximumScore());
    }
    return $questions_kept;
  }

  /**
   * Finds out if a question has been answered or not...
   *
   * @return
   *   true if there exists answers to the current question
   */
  public function hasBeenAnswered() {
    if (!isset($this->node->nid)) return false;
    $sql = 'SELECT *
            FROM {quiz_node_results_answers}
            WHERE question_nid = %d AND question_vid = %d
            LIMIT 1';
    $res = db_query($sql, $this->node->nid, $this->node->vid);
    return db_fetch_object($res) ? TRUE : FALSE;
  }

  /**
   *
   * @return boolean
   *   true iff the view may include the correct answers to the question
   */
  public function viewCanRevealCorrect() {
    // permission overrides the hook
    if (user_access('view any quiz question correct response'))
      return true;
    $results = module_invoke_all('answers_access', $node);
    $may_view_answers = in_array(true, $results);
    return $may_view_answers;
  }

}

/**
 * Each question type must store its own response data and be able to calculate a score for
 * that data.
 */
interface QuizQuestionResponse {

  /**
   * Create a new user response.
   *
   * @param $result_id
   *  The result ID for the user's result set. There is one result ID per time
   *  the user takes a quiz.
   * @param $question_node
   *  The question node.
   * @param $answer
   *  The answer (dependent on question type).
   */
  public function __construct($result_id, stdClass $question_node, $tries = NULL);

  /**
   * Save the current response.
   */
  public function save();
  /**
   * Delete the response.
   */
  public function delete();

  /**
   * Calculate the score for the response.
   */
  public function score();

  /**
   * Determine whether the score is a passing score.
   */
  public function isCorrect();

  /**
   * Indicate whether the response has been evaluated (scored) yet.
   * Questions that require human scoring (e.g. essays) may need to manually
   * toggle this.
   */
  public function isEvaluated();

  /**
   * Get the user's response.
   */
  public function getResponse();

  /**
   * Get data suitable for reporting a user's score on the question.
   * This expects an object with the following attributes:
   *
   *  answer_id; // The answer ID
   *  answer; // The full text of the answer
   *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
   *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
   *  question_vid
   *  question_nid
   *  result_id
   */
  public function getReport();

  /**
   * Get the integer score.
   */
  public function getScore();

  /**
   * Repesent the response as a stdClass object.
   *
   * Convert data to an object that has the following properties:
   * - $score
   * - $rid
   * - $nid
   * - $vid
   * - $is_correct
   */
  public function toBareObject();
}

/**
 * A base implementation of QuizQuestionResponse.
 *
 */
abstract class AbstractQuizQuestionResponse implements QuizQuestionResponse {
  protected $rid = 0;
  protected $is_correct = FALSE;

  protected $evaluated = TRUE;
  public $question = NULL;
  protected $answer = NULL;
  protected $score;

  public function __construct($result_id, stdClass $question_node, $answer = NULL) {
    $this->rid = $result_id;
    $this->question = $question_node;
    $this->answer = $answer;
    $sql = 'SELECT is_skipped
            FROM {quiz_node_results_answers}
            WHERE result_id = %d AND question_nid = %d AND question_vid = %d';
    $res = db_query($sql, $result_id, $question_node->nid, $question_node->vid);
    $this->is_skipped = db_result($res);
  }

  public function refreshQuestionNode($newNode) {
    $this->question = $newNode;
  }

  public function isEvaluated() {
    return (bool)$this->evaluated;
  }

  /**
   * Check to see if the answer is marked as correct.
   *
   * This default version returns TRUE iff the score is equal to the maximum possible score.
   */
  function isCorrect() {
    $possible = $this->getMaxScore();
    $actual = $this->getScore();
    assert($actual <= $possible);

    return ($possible == $actual);
  }

  function getScore($weight_adjusted = TRUE) {
    if (!isset($this->score)) $this->score = $this->score();
    if (isset($this->question->score_weight) && $weight_adjusted)
    return round($this->score * $this->question->score_weight);
    return $this->score;
  }

  public function getMaxScore($weight_adjusted = TRUE) {
    if (!isset($this->question->max_score)) $this->question->max_score = $this->question->getMaximumScore();
    if (isset($this->question->score_weight) && $weight_adjusted)
      return round($this->question->max_score * $this->question->score_weight);
    return $this->question->max_score;
  }

  function toBareObject() {
    $obj = new stdClass();
    $obj->score = $this->getScore(); // This can be 0 for unscored.
    $obj->nid = $this->question->nid;
    $obj->vid = $this->question->vid;
    $obj->rid = $this->rid;
    $obj->is_correct = $this->isCorrect();
    $obj->is_evaluated = $this->isEvaluated();
    $obj->is_skipped = FALSE;
    $obj->is_valid = $this->isValid();
    return $obj;
  }

  public function isValid() {
    return TRUE;
  }

  public function getReport() {
    // Basically, we encode internal information in a
    // legacy array format for Quiz.
    $report = array(
      'answer_id' => 0, // <-- Stupid vestige of multichoice.
      'answer' => $this->answer,
      'is_evaluated' => $this->isEvaluated(),
      'is_correct' => $this->isCorrect(),
      'score' => $this->getScore(),
      'question_vid' => $this->question->vid,
      'question_nid' => $this->question->nid,
      'result_id' => $this->rid,
    );

    return $report;
  }

  public function getReportForm($showpoints = TRUE, $showfeedback = TRUE, $allow_scoring = FALSE) {
    $form = array();
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $this->question->nid,
    );
    $form['vid'] = array(
      '#type' => 'value',
      '#value' => $this->question->vid,
    );
    $form['rid'] = array(
      '#type' => 'value',
      '#value' => $this->rid,
    );
    if ($submit = $this->getReportFormSubmit($showpoints, $showfeedback, $allow_scoring)) {
      $form['submit'] = array(
        '#type' => 'value',
        '#value' => $submit,
      );
    }
    if ($validate = $this->getReportFormValidate($showpoints, $showfeedback, $allow_scoring)) {
      $form['validate'] = array(
        '#type' => 'value',
        '#value' => $validate,
      );
    }
    $form['question'] = $this->getReportFormQuestion($showpoints, $showfeedback);
    $form['score'] = $this->getReportFormScore($showpoints, $showfeedback, $allow_scoring);
    $form['max_score'] = array(
      '#type' => 'value',
      '#value' => $this->getMaxScore(),
    );
    $form['response'] = $this->getReportFormResponse($showpoints, $showfeedback);

    $form['#theme'] = $this->getReportFormTheme($showpoints, $showfeedback);
    $form['#is_correct'] = $this->isCorrect();
    $form['#is_evaluated'] = $this->isEvaluated();
    $form['#is_skipped'] = $this->is_skipped;
    return $form;
  }

  public function getReportFormQuestion($showpoints = TRUE, $showfeedback = TRUE) {
    return array(
      '#type' => 'markup',
      '#value' => check_markup($this->question->body, $this->question->format, FALSE),
    );
  }

  public function getReportFormScore($showpoints = TRUE, $showfeedback = TRUE, $allow_scoring = FALSE) {
    return array(
      '#type' => 'markup',
      '#value' => '<span class="quiz-report-score">'. $this->getScore() .'</span>',
    );
  }

  public function getReportFormSubmit($showfeedback = TRUE, $showpoints = TRUE, $allow_scoring = FALSE) {
    return FALSE;
  }

  public function getReportFormValidate($showfeedback = TRUE, $showpoints = TRUE, $allow_scoring = FALSE) {
    return FALSE;
  }

  public function getReportFormTheme($showfeedback = TRUE, $showpoints = TRUE) {
    return FALSE;
  }
}

