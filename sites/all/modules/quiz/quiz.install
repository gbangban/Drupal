<?php
// $Id: quiz.install,v 1.23.2.31 2010/01/22 15:22:57 falcon Exp $

/**
 * @file
 * Quiz install schema for installing the quiz module
 *
 */

function quiz_update_6408() {
  $results = array();
  db_create_table($results, 'quiz_user_settings', _quiz_user_settings_tbl());
  db_add_field($results, 'quiz_node_properties', 'randomization', array(
    'type' => 'int', 
    'size' => 'small', 
    'not null' => TRUE, 
    'default' => 0
  ));
  $sql = 'UPDATE {quiz_node_properties}
          SET randomization = 1
          WHERE shuffle = 1';
  $results[] = update_sql($sql);
  db_drop_field($results, 'quiz_node_properties', 'shuffle');
  $sql = 'UPDATE {quiz_node_properties}
          SET randomization = 2
          WHERE randomize = 1';
  $results[] = update_sql($sql);
  db_drop_field($results, 'quiz_node_properties', 'randomize');
  return $results;
}

/**
 * Implementation of hook_update_N().
 * Adding a new field to for whether to repeat questions until they're found correct
 */
function quiz_update_6407() {
  $results = array();
  db_add_field($results, 'quiz_node_results', 'is_evaluated', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  $sql = 'UPDATE {quiz_node_results}
          SET is_evaluated = 1
          WHERE time_end > 0';
  $results[] = update_sql($sql);
  $tables = array('quiz_short_answer_user_answers', 'quiz_long_answer_user_answers');
  foreach ($tables as $table) {
    if (db_table_exists($table)) {
      $sql = 'UPDATE {quiz_node_results}
              SET is_evaluated = 0
              WHERE result_id IN (
                SELECT result_id
                FROM {'. $table .'} tbl
                WHERE tbl.is_evaluated = 0
              )';
      $results[] = update_sql($sql);
    }
  }
  return $results;
}

/**
 * Implementation of hook_update_N().
 * Adding a new field to for whether to repeat questions until they're found correct
 */
function quiz_update_6406() {
  $result = array();
  db_add_field($result, 'quiz_node_properties', 'keep_results', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 2));
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Adding a new field to for whether to repeat questions until they're found correct
 */
function quiz_update_6405() {
  $result = array();
  db_add_field($result, 'quiz_node_properties', 'repeat_until_correct', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Adding a new field to save if a quiz takes random questions or not.
 */
function quiz_update_6404() {
  $result = array();
  if (!db_column_exists('quiz_node_properties', 'randomize')) {
    db_add_field($result, 'quiz_node_properties', 'randomize', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));
    $sql = 'UPDATE {quiz_node_properties}
            SET randomize = 1
            WHERE number_of_random_questions > 0';
    $result[] = update_sql($sql);
  }
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Adding a new field to save timer status for a timed quiz.
 */
function quiz_update_6403() {
  $result = array();
  if (!db_column_exists('quiz_node_results', 'time_left')) {
    db_add_field($result, 'quiz_node_results', 'time_left', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));
  }
  if (!db_column_exists('quiz_node_properties', 'time_left')) {
    db_add_field($result, 'quiz_node_properties', 'time_left', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));
  }
  return $result;
}

/**
 * Implementation of hook_update_N()
 *
 * Adding a field to turn on/off questions skipping in quiz.
 */
function quiz_update_6402() {
  $result = array();
  db_add_field($result, 'quiz_node_properties', 'allow_skipping', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N()
 *
 * Add a field to store max score for each question in a quiz.
 * Also store the total max score in the quiz_node_properties table
 */
function quiz_update_6401(&$sandbox = NULL) {
  $result = array();

  // Altering tables:
  if (!isset($sandbox['tables_changed'])) {
    db_add_field($result, 'quiz_node_relationship', 'max_score', array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ));
    db_add_field($result, 'quiz_node_properties', 'max_score', array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ));
    // THIS IS UGLY! But it needs to be installed here because we don't know in what order the updater
    // Will execute the update hooks...
    db_create_table($result, 'quiz_question_properties', array(
      'fields' => array(
        'nid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'vid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'max_score' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array(
        'nid' , 'vid'
      ),
    ));
    $sandbox['tables_changed'] = TRUE;
    $sandbox['progress'] = 0;
  
  
    // Updating max_score for all question types
    
    // Creating array with all question types and relevant tables
    $sandbox['question_types'] = array(
      'long_answer' => array('node_properties'),
      'matching' => array('node'),
      'multichoice' => array('properties', 'answers'),
      'scale' => array('node_properties'),
      'short_answer' => array('node_properties'),
      'truefalse' => array('node'),
    );
    // Removing questiontypes that aren't in use 
    foreach ($sandbox['question_types'] as $type => $tables) {
      $tables_exists = TRUE;
      $pre = 'quiz_'. $type .'_';
      foreach ($tables as $table) {
        if (!db_table_exists($pre . $table)) $tables_exists = FALSE;
      }
      if (!$tables_exists) {
        unset($sandbox['question_types'][$type]);
      }
    }
    $sandbox['max'] = count($sandbox['question_types']) + 4;
  }
  // Doing convertion for one questiontype at a time...
  if ($current_type = array_pop(array_keys($sandbox['question_types']))) {
    $tables = array_pop($sandbox['question_types']);
    switch ($current_type) {
      case 'long_answer':
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid, max_score)
                SELECT t.nid, t.vid, t.maximum_score
                FROM {quiz_long_answer_node_properties} t';
        $result[] = update_sql($sql);
        db_drop_table($result, 'quiz_long_answer_node_properties');
        break;
      case 'matching':
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid, max_score)
                SELECT t.nid, t.vid, COUNT(*)
                FROM {quiz_matching_node} t
                GROUP BY t.nid, t.vid';
        $result[] = update_sql($sql);
        break;
      case 'multichoice':
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid, max_score)
                SELECT t.nid, t.vid, 1
                FROM {quiz_multichoice_properties} t
                WHERE t.choice_boolean = 1';
        $result[] = update_sql($sql);
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid)
                SELECT t.nid, t.vid
                FROM {quiz_multichoice_properties} t
                WHERE t.choice_boolean = 0';
        $result[] = update_sql($sql);
        $sql = 'UPDATE {quiz_question_properties} p
                JOIN {quiz_multichoice_properties} mp
                ON p.nid = mp.nid AND p.vid = mp.vid
                SET max_score = (
                  SELECT COUNT(max_score)
                  FROM (
                    SELECT if(a.score_if_chosen > a.score_if_not_chosen, a.score_if_chosen, 
                    a.score_if_not_chosen) AS max_score, question_nid, question_vid
                    FROM {quiz_multichoice_answers} a
                  ) AS ma
                  WHERE ma.question_nid = p.nid AND ma.question_vid = p.vid
                  GROUP BY ma.question_nid, ma.question_vid
                )
                WHERE mp.choice_boolean = 0';
        $result[] = update_sql($sql);
        break;
      case 'scale':
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid)
                SELECT t.nid, t.vid
                FROM {quiz_scale_node_properties} t';
        $result[] = update_sql($sql);
        break;
      case 'short_answer':
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid, max_score)
                SELECT t.nid, t.vid, t.maximum_score
                FROM {quiz_short_answer_node_properties} t';
        $result[] = update_sql($sql);
        db_drop_field($result, 'quiz_short_answer_node_properties', 'maximum_score');
        break;
      case 'truefalse':
        $sql = 'INSERT INTO {quiz_question_properties}
                (nid, vid, max_score)
                SELECT t.nid, t.vid, 1
                FROM {quiz_truefalse_node} t';
        $result[] = update_sql($sql);
        break;
    }
    $sandbox['progress']++;
  }
  else {
    if (!isset($sandbox['quiz_directions_done'])) {
      $sql = 'INSERT INTO {quiz_question_properties}
              (nid, vid, max_score)
              SELECT n.nid, n.vid, 0
              FROM {node} n
              WHERE type = "quiz_directions"';
      $result[] = update_sql($sql);
      $sandbox['quiz_directions_done'] = TRUE;
    }
    // Store default max score in node relationship table
    elseif (!isset($sandbox['quiz_relationships_done'])) {
      $sql = 'UPDATE {quiz_node_relationship} r
              JOIN {quiz_question_properties} p
              ON r.child_nid = p.nid AND r.child_vid = p.vid
              SET r.max_score = p.max_score';
      $result[] = update_sql($sql);
      $sandbox['quiz_relationships_done'] = TRUE;
    }
    // In quiz 3.x mathing questions only gave 1 point...
    elseif (!isset($sandbox['matching_relationship_done'])) {
      $sql = 'UPDATE {quiz_node_relationship} r
              JOIN {node} n
              ON r.child_nid = n.nid AND r.child_vid = n.vid
              SET r.max_score = 1
              WHERE n.type = "matching"';
      $result[] = update_sql($sql);
      $sandbox['matching_relationship_done'] = TRUE;
    }
    elseif (!isset($sandbox['quiz_properties_done'])) {
      $sql = 'UPDATE {quiz_node_properties} p
              SET p.max_score = 
                (SELECT SUM(r.max_score)
                FROM {quiz_node_relationship} r
                WHERE r.parent_nid = p.nid AND r.parent_vid = p.vid
                GROUP BY r.parent_nid, r.parent_vid)';
      $result[] = update_sql($sql);
      $sandbox['quiz_properties_done'] = TRUE;
    }
    $sandbox['progress']++;
  } 
  
  $result['#finished'] = $sandbox['progress'] / $sandbox['max'];
  return $result;
}

/**
 * Implementation of hook_update_N().
 * quiz_node_question_properties has been considered deprecated. With the new multichoice module
 * it is not beeing used at all, and therefore we remove it.
 */
function quiz_update_6400() {
  $result = array();
  db_drop_table($result, 'quiz_node_question_properties');
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Adding a new field to save timer status for a timed quiz.
 */
function quiz_update_6306() {
  $result = array();
  db_add_field($result, 'quiz_node_results', 'time_left', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N().
 *  Adding new field to integrate quiz node and userpoints modules
 */
function quiz_update_6305() {
  $result = array();
  db_add_field($result, 'quiz_node_properties', 'has_userpoints', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N().
 *
 */
function quiz_update_6304() {
  $result = array();
  db_add_field($result, 'quiz_node_relationship', 'weight', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Add new field for invalidating entire quizzes. Use it on those mean cheaters.
 */
function quiz_update_6303() {
  $result = array();
  // Add a field that allows an admin to mark a quiz as invalid.
  db_add_field($result, 'quiz_node_results', 'is_invalid', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Add and rearrange indexes across several of the tables.
 */
function quiz_update_6302() {
  $result = array();
  db_add_index($result, 'quiz_node_result_options', 'quiz_id', array('vid, nid'));
  db_add_index($result, 'quiz_node_properties', 'quiz_id', array('vid, nid'));
  db_add_index($result, 'quiz_node_results', 'user_results', array('uid', 'vid', 'nid'));

  return $result;
}
/**
 * Implementation of hook_update_N().
 * Add is_skipped column to quiz answer field. This allows questions to be skipped.
 */
function quiz_update_6301() {
  $result = array();
  // Do this:
  //'is_skipped' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
  db_add_field($result, 'quiz_node_results_answers', 'is_skipped', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  return $result;
}

/**
 * Implementation of hook_update_N().
 * Add aid to quiz_node_properties table.
 */
function quiz_update_6300() {
  $result = array();
  db_add_field($result, 'quiz_node_properties', 'aid', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE));
  return $result;
}

/**
 * Implementation of hook_install()
 */
function quiz_install() {
  // Create Tables
  drupal_install_schema('quiz');
  // Default the "Show Author and Date" for quiz nodes to OFF.
  $temp_array = variable_get('theme_settings', array());
  $temp_array['toggle_node_info_quiz'] = 0;
  variable_set('theme_settings', $temp_array);
  // Default the comment settings to disabled.
  variable_set('comment_quiz', '0');
  drupal_set_message(t('Quiz module has been enabled. To !create_a_quiz go to Content Management -> Create Content -> Quiz.', array('!create_a_quiz' => l(t('create a quiz'), 'node/add/quiz'))));
}

/**
* Implementation of hook_schema().
*/
function quiz_schema() {
  $schema = array();
  /**
   * Connect all the quiz specific properties to the correct version of a quiz.
   */
  // Create the quiz node properties table
  $schema['quiz_node_properties'] = array(
    'fields' => array(
      'property_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'aid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'number_of_random_questions' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pass_rate' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'summary_pass' => array(
        'type' => 'text',
      ),
      'summary_default' => array(
        'type' => 'text',
      ),
      'randomization' => array(
        'type' => 'int', 
        'size' => 'small', 
        'not null' => TRUE, 
        'default' => 0
      ),
      'backwards_navigation' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'keep_results' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'repeat_until_correct' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'feedback_time' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'quiz_open' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'quiz_close' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'takes' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'time_limit' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'quiz_always' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'has_userpoints' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'time_left' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0
      ),
      'max_score' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_skipping' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('property_id'),
    // 'unique keys' => array('vid'),
    'indexes' => array('quiz_id' => array('vid', 'nid')),
  );
  /*
   * Both a quiz and a quiz question are nodes with versions.  A quiz is a parent node of a quiz question,
   * making the quiz question the child.
   *
   * The quiz_node_relationship table stores this relationship in a way that allows a quiz question to be
   * the child of multiple quizzes without losing version history.
   *
   * Future functionality will allow a quiz question to be a parent of another quiz question with the same
   * data model.  This will make adaptive quiz functionality possible without redesign.
   */
  // Create the quiz node relationship table
  $schema['quiz_node_relationship'] = array(
    'fields' => array(
      'parent_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
    ),
      'parent_vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'child_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'child_vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'question_status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_score' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('parent_nid', 'parent_vid', 'child_nid', 'child_vid'),
  );

  /**
   * Quiz specific options concerning  availability and access to scores.
   */
  // Create the quiz node results table
  $schema['quiz_node_results'] = array(
    'fields' => array(
      'result_id' => array(
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'time_start' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'time_end' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'released' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'score' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'is_invalid' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'is_evaluated' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'time_left' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('result_id'),
    'indexes' => array(
      'user_results' => array('uid', 'vid', 'nid'),
    ),
  );

  /**
   * Information about a particular question in a result
   */
  $schema['quiz_node_results_answers'] = array(
    'fields' => array(
      'result_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
    ),
      'question_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'question_vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'is_correct' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'is_skipped' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'points_awarded' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'answer_timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('result_id', 'question_nid', 'question_vid')
  );

  /**
   * Allows custom feedback based on the results of a user completing a quiz.
   */
  // Create the quiz node result options table
  $schema['quiz_node_result_options'] = array(
    'fields' => array(
      'option_id' => array(
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'option_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'option_summary' => array(
        'type' => 'text',
      ),
      'option_start' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'option_end' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('option_id'),
    'indexes' => array(
      'quiz_id' => array('vid, nid'),
    )
  );
  
  $schema['quiz_user_settings'] = _quiz_user_settings_tbl();
  return $schema;
}

/**
 * Implementation of hook_uninstall()
 */
function quiz_uninstall() {
  drupal_uninstall_schema('quiz');
  $var = array(
    'quiz_name',
    'quiz_default_close',
    'quiz_use_passfail',
    'quiz_default_pass_rate',
    'quiz_action_type',
    'quiz_action_type',
    'quiz_email_results',
    'quiz_email_results_body',
    'quiz_email_results_subject',
    'quiz_has_timer',
    'quiz_has_userpoints',
    'quiz_max_result_options',
    'quiz_remove_partial_quiz_record',
    'quiz_show_allowed_times',
    'quiz_autotitle_length',
    'comment_quiz'
  );
  foreach ($var as $v) {
    variable_del($v);
  }
}

function _quiz_user_settings_tbl() {
  return array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'nid for the last node the user edited',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'vid for the last node the user edited',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'aid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'number_of_random_questions' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pass_rate' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'summary_pass' => array(
        'type' => 'text',
      ),
      'summary_default' => array(
        'type' => 'text',
      ),
      'randomization' => array(
        'type' => 'int', 
        'size' => 'small', 
        'not null' => TRUE, 
        'default' => 0
      ),
      'backwards_navigation' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'keep_results' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'repeat_until_correct' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'feedback_time' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'takes' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'time_limit' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'quiz_always' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'has_userpoints' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'allow_skipping' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid'),
  );
}